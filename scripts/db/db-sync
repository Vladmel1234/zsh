#!/usr/bin/env bash

# Description  : Sync DB script for MySQL, Mongo, Postgres.
# Usage        : db sync [-t db-(t)ype] [-n db-(n)ame] [-r (r)emote-credentials] [-m sync-(m)ethod] [-h]
# Dependencies : mysql, mongo, postgres, openssh-server
# Example      : db sync -m get -t mysql -n some_db -p 123456 -r deploy@server.com
# Notes        : Assumes user root, no password.
# Sources      : http://stackoverflow.com/a/15198031/865268
#                http://stackoverflow.com/a/16620593/865268
#                http://stackoverflow.com/a/1238305/865268

function exit_script($MESSAGE) {
  echo $MESSAGE
  ssh -S db-sync-socket -O exit $REMOTE_CREDENTIALS >&2
  exit 1
}

# TODO: Random Port Assigning?!
TUNNEL_PORT=12345
SYNC_TYPE="get" # Default Argument. All others are a must.

# Get All Variables
# ------------------------------------------------------------------------------------------------------------
while getopts :m:t:n:r:p:h OPTION; do
  case $OPTION in
    t) DB_TYPE=$OPTARG ;;
    m) SYNC_TYPE=$OPTARG ;;
    n) DB_NAME=$OPTARG ;;
    r) REMOTE_CREDENTIALS=$OPTARG ;;
    h) echo "Usage: db-sync [-t db-(t)ype] [-n db-(n)ame] [-r (r)emote-credentials] [-m sync-(m)ethod] [-h]"
       exit 0 ;;
    \?) echo "Invalid option -$OPTARG. Please run 'db-sync -h' for help" >&2
        exit 1 ;;
    :) echo "Option -$OPTARG requires an argument. Please run 'db-sync -h' for help" >&2
       exit 1 ;;
  esac
done

# TODO: Sanity Checks For Variables

# Check DB Type
# -----------------------------------------------------------------------------------------------------------
if [[ $DB_TYPE == "mysql" ]]; then
  DB_PORT=3306
  DB_EXISTS="mysql -uroot -e \"SHOW DATABASES LIKE '$DB_NAME';\""
  SYNC_COMMAND="mysqldump -uroot -h127.0.0.1 -P$TUNNEL_PORT $DB_NAME | mysql -uroot -h127.0.0.1 -P$DB_PORT -C $DB_NAME"

elif [[ $DB_TYPE == "mongo" ]]; then
  DB_PORT=27017
  DB_EXISTS="mongo --eval \"printjson(db.adminCommand('listDatabases'))\" | grep -o $DB_NAME"
  SYNC_COMMAND="mongo --host 127.0.0.1:$DB_PORT $DB_NAME --eval \"db.dropDatabase();db.copyDatabase('$DB_NAME','$DB_NAME','127.0.0.1:$TUNNEL_PORT');\""

elif [[ $DB_TYPE == "postgres" ]]; then
  DB_PORT=5432
  DB_EXISTS="psql -l | grep -o $DB_NAME"
  SYNC_COMMAND="pg_dump -C -h127.0.0.1 -p$TUNNEL_PORT -Uroot $DB_NAME | psql -h127.0.0.1 -p$DB_PORT -Uroot $DB_NAME"

else
  exit_script("Failed to recognize DB type. Please trace back for errors.")
fi

# Connect To SSH With Master Control And Check DB's
# ------------------------------------------------------------------------------------------------------------
echo "Connecting through ssh..."
ssh -fqTNM -S db-sync-socket -L $TUNNEL_PORT:127.0.0.1:$DB_PORT $REMOTE_CREDENTIALS

echo "Check local and remote DB's..."
LOCAL_DB_EXISTS=`eval $DB_EXISTS`
REMOTE_DB_EXISTS=`ssh -S db-sync-socket $REMOTE_CREDENTIALS "$DB_EXISTS"`

# Check Sync Type
# ------------------------------------------------------------------------------------------------------------
if [[ $SYNC_TYPE == "get" ]]; then
  [[ -z $REMOTE_DB_EXISTS ]] && exit_script("Remote DB doesn't exist. Are you sure you typed it right?")
  [[ -z $LOCAL_DB_EXISTS && $DB_TYPE == "mysql" ]] && echo "Local DB doesn't exist. Creating now..." && db-mysql-create $DB_NAME && sleep 2

elif [[ $SYNC_TYPE == "put" ]]; then
  # Reverting the ports for a reverse sync. Yay clever method!:D
  TUNNEL_PORT=$DB_PORT
  DB_PORT=12345

  # TODO: Send `db-mysql-create` through ssh?
  [[ -z $REMOTE_DB_EXISTS && $DB_TYPE == "mysql" ]] && exit_script("Remote DB doesn't exist. Please create it manually before you continue.")
  [[ -z $LOCAL_DB_EXISTS ]] && exit_script("Local DB doesn't exist. Are you sure you typed it right?")
fi

# Perform Sync
# ------------------------------------------------------------------------------------------------------------
echo "Syncing remote DataBase to local environment..."
eval $SYNC_COMMAND
if [ $? != 0 ]; then
  exit_script("DB sync failed. Please check back to see the error.")
else
  echo "DB synced successfully!"
fi

# Shutdown SSH
# ------------------------------------------------------------------------------------------------------------
echo "Disconnecting from ssh..."
ssh -S db-sync-socket -O exit $REMOTE_CREDENTIALS >&2